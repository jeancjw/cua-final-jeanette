[
["index.html", "Exploring the Airbnb Market in Singapore 1 Project Summary", " Exploring the Airbnb Market in Singapore Jeanette Choong 1 Project Summary Airbnbs as potential short-term accommodations are practically illegal in Singapore. Under the 2017 Planning Act, private home owners are permitted to rent our their homes for a minimum of three consecutive months. For HDB flats, home owners may only rent out their homes to non-tourists for a minimum of six consecutive months, under the Housing and Development Act. Why are there still so many Airbnb listings in Singapore despite these legal restrictions? knitr::opts_chunk$set(dpi = 200) library(tidyverse) library(here) library(sf) library(tmap) listings &lt;- readRDS(here::here(&quot;projdata/listings.rds&quot;)) listings_sf &lt;- st_as_sf(listings, coords = c(&quot;longitude&quot;, &quot;latitude&quot;), crs = 4326) %&gt;% st_transform(3414) # convert coordinates to SVY21 tmap_mode(&quot;view&quot;) ## tmap mode set to interactive viewing tm_shape(listings_sf) + tm_symbols(col=&quot;blue&quot;, shape = 21, size = 0.1, border.col = &quot;grey21&quot;, border.lwd=0.5) "],
["introduction.html", "2 Introduction 2.1 Research Questions &amp; Hypotheses 2.2 Research Approach 2.3 Other methods", " 2 Introduction Airbnb has become an increasingly popular platform for travellers to seek short-term accommodation options when they are overseas. However, the home-sharing platform’s rapid growth since its inception in 2008 has also put a spotlight on its negative effects, such as causing disruptions to neighbourhoods and threatening the hotel industry (Gerdeman, 2018; Nieuwland and van Melik, 2020). In Singapore, short-term accommodation laws under the 2017 Planning Act and Housing and Development Act impose stringent legal restrictions that make it almost impossible for travellers to seek accommodation from the Airbnb platform without flouting the laws. Despite these laws, there still exists 7713 Airbnb listings in Singapore as of March 2020 (Inside Airbnb, 2020), suggesting the possibility that several hosts are renting out their listings illegally. 2.1 Research Questions &amp; Hypotheses Therefore, the main research question for this study is: Why is Singapore still seeing a significant number of Airbnb listings despite the laws on short-term accommodations? Under this question, the study hypothesises that many home owners may be flouting the rules. Some guiding questions for this study include: How have the number of listings changed over the years? What types of property listings exist in the Airbnb market, and how are they distributed spatially? Which planning areas see more listings that potentially violate the laws on short-term accommodation? How much does it cost to rent an Airbnb in Singapore and what may be influencing these prices? 2.2 Research Approach First, I will obtain an overview of the Airbnb market by looking at the number of listings and reviews over the years. This will provide insight into the popularity of Airbnbs in Singapore. I will then perform an exploratory data analysis on selected variables such as price, property and room types, reviews per month, minimum length of stay and so on, to get a sense of which listings/hosts/property types may be violating the law. Next, I will use the tmap library to visualise the spatial distribution of listings across Singapore’s planning regions. I will also visualise the listings by minimum length of stay (minimum_nights) to get a sense of where the potentially errant listings are. I will also visualise the listings that are in close proximity to the MRT stations and this may have implications for prices. I also plan to use PCA to understand how the different variables may be correlated. This may provide some insight into the pricing and spatial distribution of the Airbnb listings, which may be difficult to visualise purely from plotting the distribution of listings. 2.3 Other methods I also attempted spatial clustering and regression, which were not very successful and helpful in answering my research questions. For these methods,I have included a short reflection on why I thought they may not be appropriate for this study. "],
["exploratory-data-analysis.html", "3 Exploratory Data Analysis 3.1 Setting up the data 3.2 Popularity of Airbnbs 3.3 Analysis of different variables", " 3 Exploratory Data Analysis 3.1 Setting up the data knitr::opts_chunk$set(dpi = 200) library(tidyverse) library(here) library(sf) library(skimr) library(lubridate) library(forcats) library(tmap) library(psych) library(RColorBrewer) listings &lt;- read_csv(here::here(&quot;projdata/listings-mar20.csv&quot;)) ## Parsed with column specification: ## cols( ## .default = col_double(), ## listing_url = col_character(), ## name = col_character(), ## summary = col_character(), ## space = col_character(), ## description = col_character(), ## experiences_offered = col_character(), ## neighborhood_overview = col_character(), ## notes = col_character(), ## transit = col_character(), ## access = col_character(), ## interaction = col_character(), ## house_rules = col_character(), ## thumbnail_url = col_logical(), ## medium_url = col_logical(), ## picture_url = col_character(), ## xl_picture_url = col_logical(), ## host_url = col_character(), ## host_name = col_character(), ## host_location = col_character(), ## host_about = col_character() ## # ... with 36 more columns ## ) ## See spec(...) for full column specifications. ## Warning: 5 parsing failures. ## row col expected actual file ## 3389 license 1/0/T/F/TRUE/FALSE 201117828H &#39;/Users/jeancjw/Documents/SUTD/MUSPP/02.522 Urban Data &amp; Methods II CUA/cua-jeanette-c/projdata/listings-mar20.csv&#39; ## 4641 license 1/0/T/F/TRUE/FALSE 201537598E &#39;/Users/jeancjw/Documents/SUTD/MUSPP/02.522 Urban Data &amp; Methods II CUA/cua-jeanette-c/projdata/listings-mar20.csv&#39; ## 5156 license 1/0/T/F/TRUE/FALSE 201202564R &#39;/Users/jeancjw/Documents/SUTD/MUSPP/02.522 Urban Data &amp; Methods II CUA/cua-jeanette-c/projdata/listings-mar20.csv&#39; ## 6227 license 1/0/T/F/TRUE/FALSE 201537598E &#39;/Users/jeancjw/Documents/SUTD/MUSPP/02.522 Urban Data &amp; Methods II CUA/cua-jeanette-c/projdata/listings-mar20.csv&#39; ## 6234 license 1/0/T/F/TRUE/FALSE 201537598E &#39;/Users/jeancjw/Documents/SUTD/MUSPP/02.522 Urban Data &amp; Methods II CUA/cua-jeanette-c/projdata/listings-mar20.csv&#39; listings &lt;- listings %&gt;% select(id, name, listing_url, description, host_id, host_name, host_since, host_response_time, host_response_rate, host_acceptance_rate, host_is_superhost, host_listings_count, property_type, room_type, price, minimum_nights, neighbourhood_cleansed, neighbourhood_group_cleansed, latitude, longitude, number_of_reviews, number_of_reviews_ltm, review_scores_rating, reviews_per_month) listings &lt;- rename(listings, planning_area = neighbourhood_cleansed, planning_region = neighbourhood_group_cleansed) saveRDS(listings, here::here(&quot;projdata/listings.rds&quot;)) 3.2 Popularity of Airbnbs 3.2.1 Number of listings over time Data for Airbnb listings in Singapore is only available as far back as March 2019. Based on monthly listings data, we can see that the number of listings remained relatively stable, with minor seasonal “peaks” in the months of May, June and December, which are usually holiday season. # values based on number of observations from previous months&#39; listings listings_time &lt;- tribble( ~month, ~total_listings, &quot;mar20&quot;, 7713, &quot;feb20&quot;, 8047, &quot;jan20&quot;, 7857, &quot;dec19&quot;, 8000, &quot;nov19&quot;, 7857, &quot;oct19&quot;, 7794, &quot;sep19&quot;, 7675, &quot;aug19&quot;, 7907, &quot;jul19&quot;, 8033, &quot;jun19&quot;, 8293, &quot;may19&quot;, 8325, &quot;apr19&quot;, 8090, &quot;mar19&quot;, 7975 ) month_order &lt;- rev(listings_time$month) listings_time %&gt;% mutate(month = ordered(month, levels = month_order)) %&gt;% ggplot(aes(x = month, y = total_listings)) + geom_col(color = &quot;grey&quot;, fill = &quot;paleturquoise3&quot;) + geom_text(aes(label = total_listings), vjust = -0.5, size = 3) + labs(y = &quot;Total listings&quot;) Due to the lack of data, it is not possible to look at how the number of listings evolved since the implementation of the laws in 2017, based on the listings data. Instead, the reviews data can be used as a proxy for how popular the Airbnb platform has been over the years. 3.2.2 Number of Reviews over time reviews &lt;- read_csv(here::here(&quot;projdata/reviews-mar20.csv&quot;)) ## Parsed with column specification: ## cols( ## listing_id = col_double(), ## id = col_double(), ## date = col_date(format = &quot;&quot;), ## reviewer_id = col_double(), ## reviewer_name = col_character(), ## comments = col_character() ## ) Plotting the number of reviews for each date since May 2011 till March 2020 makes the data quite difficult to read although we can see a general upward trend. reviews %&gt;% ggplot() + geom_bar(aes(date)) + labs(y = &quot;number of reviews&quot;) To make things neater, we can look at the aggregated number of reviews in each year. reviews_year &lt;- reviews %&gt;% mutate(year = case_when( date = str_detect(date, &quot;2011&quot;) ~ &quot;2011&quot;, date = str_detect(date, &quot;2012&quot;) ~ &quot;2012&quot;, date = str_detect(date, &quot;2013&quot;) ~ &quot;2013&quot;, date = str_detect(date, &quot;2014&quot;) ~ &quot;2014&quot;, date = str_detect(date, &quot;2015&quot;) ~ &quot;2015&quot;, date = str_detect(date, &quot;2016&quot;) ~ &quot;2016&quot;, date = str_detect(date, &quot;2017&quot;) ~ &quot;2017&quot;, date = str_detect(date, &quot;2018&quot;) ~ &quot;2018&quot;, date = str_detect(date, &quot;2019&quot;) ~ &quot;2019&quot;, date = str_detect(date, &quot;2020&quot;) ~ &quot;2020&quot; )) %&gt;% group_by(year) %&gt;% count() reviews_year ## # A tibble: 10 x 2 ## # Groups: year [10] ## year n ## &lt;chr&gt; &lt;int&gt; ## 1 2011 23 ## 2 2012 169 ## 3 2013 388 ## 4 2014 1201 ## 5 2015 4742 ## 6 2016 10206 ## 7 2017 17851 ## 8 2018 25000 ## 9 2019 38717 ## 10 2020 8119 reviews_year %&gt;% filter(year != &quot;2011&quot;) %&gt;% filter(year != &quot;2020&quot;) %&gt;% # exclude 2020 as it&#39;s only a few months into the year, and exclude 2011 as data only beganfrom mid-year ggplot() + geom_line(aes(x = year, y = n, group = NA)) + geom_point(aes(x = year, y = n)) + theme(axis.text.x = element_text(angle = 90, vjust = 0)) + ggtitle(&quot;Number of reviews over the years&quot;) + labs(y = &quot;no. of reviews&quot;) As can be seen in the plot above, there is a year-on-year increase in the number of reviews, which can mean (1) the number of listings has increased over the years, (2) the number of tenants per listing has increased over the years, or both. In any case, this may be an indication that the law is being flouted. 3.3 Analysis of different variables listings %&gt;% head() ## # A tibble: 6 x 24 ## id name listing_url description host_id host_name host_since ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 49091 COZI… https://ww… This is Ro… 266763 Francesca 40471 ## 2 50646 Plea… https://ww… Fully furn… 227796 Sujatha 40429 ## 3 56334 COZI… https://ww… This is Ro… 266763 Francesca 40471 ## 4 71609 Ensu… https://ww… For 3 (Web… 367042 Belinda 40572 ## 5 71896 B&amp;B … https://ww… Vocational… 367042 Belinda 40572 ## 6 71903 Room… https://ww… Like your … 367042 Belinda 40572 ## # … with 17 more variables: host_response_time &lt;chr&gt;, host_response_rate &lt;chr&gt;, ## # host_acceptance_rate &lt;chr&gt;, host_is_superhost &lt;lgl&gt;, ## # host_listings_count &lt;dbl&gt;, property_type &lt;chr&gt;, room_type &lt;chr&gt;, ## # price &lt;dbl&gt;, minimum_nights &lt;dbl&gt;, planning_area &lt;chr&gt;, ## # planning_region &lt;chr&gt;, latitude &lt;dbl&gt;, longitude &lt;dbl&gt;, ## # number_of_reviews &lt;dbl&gt;, number_of_reviews_ltm &lt;dbl&gt;, ## # review_scores_rating &lt;dbl&gt;, reviews_per_month &lt;dbl&gt; listings &lt;- listings %&gt;% mutate( host_name = as_factor(host_name), property_type = as_factor(property_type), planning_area = as_factor(planning_area), planning_region = as_factor(planning_region), room_type = as_factor(room_type), price = as.numeric(gsub(&quot;[\\\\$]&quot;, &quot;&quot;, price)) ) listings ## # A tibble: 7,713 x 24 ## id name listing_url description host_id host_name host_since ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 49091 &quot;COZ… https://ww… &quot;This is R… 266763 Francesca 40471 ## 2 50646 &quot;Ple… https://ww… &quot;Fully fur… 227796 Sujatha 40429 ## 3 56334 &quot;COZ… https://ww… &quot;This is R… 266763 Francesca 40471 ## 4 71609 &quot;Ens… https://ww… &quot;For 3 (We… 367042 Belinda 40572 ## 5 71896 &quot;B&amp;B… https://ww… &quot;Vocationa… 367042 Belinda 40572 ## 6 71903 &quot;Roo… https://ww… &quot;Like your… 367042 Belinda 40572 ## 7 71907 &quot;3rd… https://ww… &quot;Vocationa… 367042 Belinda 40572 ## 8 117957 &quot;Pri… https://ww… &quot;Private R… 448620 Lynnity 40619 ## 9 241503 &quot;Lon… https://ww… &quot;Stay in a… 1017645 Bianca 40780 ## 10 241508 &quot;Lon… https://ww… &quot;Stay in a… 1017645 Bianca 40780 ## # … with 7,703 more rows, and 17 more variables: host_response_time &lt;chr&gt;, ## # host_response_rate &lt;chr&gt;, host_acceptance_rate &lt;chr&gt;, ## # host_is_superhost &lt;lgl&gt;, host_listings_count &lt;dbl&gt;, property_type &lt;fct&gt;, ## # room_type &lt;fct&gt;, price &lt;dbl&gt;, minimum_nights &lt;dbl&gt;, planning_area &lt;fct&gt;, ## # planning_region &lt;fct&gt;, latitude &lt;dbl&gt;, longitude &lt;dbl&gt;, ## # number_of_reviews &lt;dbl&gt;, number_of_reviews_ltm &lt;dbl&gt;, ## # review_scores_rating &lt;dbl&gt;, reviews_per_month &lt;dbl&gt; 3.3.1 price summary(listings$price) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 14.0 65.0 125.0 169.4 199.0 9999.0 describe(listings$price) ## vars n mean sd median trimmed mad min max range skew kurtosis ## X1 1 7713 169.39 337.42 125 132.35 93.4 14 9999 9985 18.53 442.61 ## se ## X1 3.84 A quick glance at the descriptive statistics on the price variable shows us that the median is lower than the mean, and the skew is positive. This is unsurprising considering that the Airbnb hosts can generally choose how they want to price their listings. Furthermore, the dataset includes listings that are either entire home/apartments, private rooms, or hotel rooms, and within these types, are different types of houses such as bungalows, apartments, condominiums, which would affect the prices too. Since in the context of the law, where HDB flats are only allowed to be rented out for a period of six consecutive months, or 180 days, to non-tourists, while private homes have to fulfill a minimum rental length of three consecutive months or 90 days, it is safe to expect more of these listings to be private homes as it is easier to rent them out. This could explain the right skew. Visually, this is how it looks: listings %&gt;% filter(price &lt; 1000) %&gt;% # remove outliers ggplot() + geom_histogram(aes(x = price), binwidth = 10) 3.3.2 host_listings_count summary(listings$host_listings_count) ## Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s ## 0.00 1.00 9.00 50.69 51.00 403.00 17 describe(listings$host_listings_count) ## vars n mean sd median trimmed mad min max range skew kurtosis se ## X1 1 7696 50.69 91.66 9 28.48 11.86 0 403 403 2.68 7.11 1.04 The summary shows that the lowest number of listings is 0, which is strange because all of them have at least one listing, and some have multiple listings. Perhaps the data failed to capture some of this. To check the data, we can use the host_id identifier to count the number of listings they have. host_listings_count &lt;- listings %&gt;% group_by(host_id) %&gt;% count() %&gt;% arrange(-n) listings &lt;- listings %&gt;% select(-host_listings_count) host_listings_count &lt;- host_listings_count %&gt;% left_join(listings, by = &quot;host_id&quot;) listings &lt;- host_listings_count %&gt;% mutate(host_listings_count = as.numeric(n)) %&gt;% select(-n) After cleaning up the data, we can look at the descriptive statistics again: summary(listings$host_listings_count) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1.00 2.00 10.00 45.64 52.00 342.00 describe(listings$host_listings_count) ## vars n mean sd median trimmed mad min max range skew kurtosis se ## X1 1 7713 45.64 76.72 10 27.9 13.34 1 342 341 2.64 7.13 0.87 Now the lowest number of listings per host makes more sense. The maximum number of listings for a single host is 342, which is still a very high value, and may hint that Airbnb Singapore allows full-fledged rental businesses to operate using their platform. listings %&gt;% arrange(-host_listings_count) %&gt;% head() %&gt;% select(host_name, host_listings_count) ## Adding missing grouping variables: `host_id` ## # A tibble: 6 x 3 ## # Groups: host_id [1] ## host_id host_name host_listings_count ## &lt;dbl&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 66406177 Jay 342 ## 2 66406177 Jay 342 ## 3 66406177 Jay 342 ## 4 66406177 Jay 342 ## 5 66406177 Jay 342 ## 6 66406177 Jay 342 For example, the host Jay has the most listings, a total of 342, and the mean number of listings is about 50, which is indicative of the fact that most Airbnb hosts in Singapore are not individual homeowners, whom Airbnb set out for the platform to be targeted at. 3.3.3 property_type summary(listings$property_type) ## Apartment Villa House ## 3104 15 536 ## Townhouse Other Condominium ## 121 57 2174 ## Guest suite Bed and breakfast Serviced apartment ## 18 70 741 ## Hostel Loft Bungalow ## 332 122 57 ## Chalet Hotel Boat ## 3 158 7 ## Cabin Guesthouse Boutique hotel ## 1 21 158 ## Tent Aparthotel Campsite ## 6 4 3 ## Bus Heritage hotel (India) Earth house ## 1 1 1 ## Tiny house ## 2 After looking through the dataset, I realised some of the property types can be combined based on the description and url of the listing. listings &lt;- listings %&gt;% mutate(property_type = recode(property_type, &quot;Heritage hotel (India)&quot; = &quot;Hotel&quot;, &quot;Boutique hotel&quot; = &quot;Hotel&quot;, &quot;Bus&quot; = &quot;Apartment&quot;, &quot;Cabin&quot; = &quot;Hotel&quot;, &quot;Earth house&quot; = &quot;Apartment&quot;, &quot;Tiny house&quot; = &quot;Hotel&quot;, &quot;Aparthotel&quot; = &quot;Hotel&quot;, &quot;Heritage hotel (India)&quot; = &quot;Hotel&quot;, &quot;Aparthotel&quot; = &quot;Hotel&quot;, &quot;Bed and breakfast&quot; = &quot;Hostel/Dorm&quot;, &quot;Hostel&quot; = &quot;Hostel/Dorm&quot;, &quot;Villa&quot; = &quot;House&quot;, &quot;Bungalow&quot; = &quot;House&quot;, &quot;House&quot; = &quot;House&quot;)) summary(listings$property_type) ## Apartment House Townhouse Other ## 3106 608 121 57 ## Condominium Guest suite Hostel/Dorm Serviced apartment ## 2174 18 402 741 ## Loft Chalet Hotel Boat ## 122 3 324 7 ## Guesthouse Tent Campsite ## 21 6 3 Here we see the types of housing being rented out over Airbnb. Interestingly, a number of hotels have taken to the Airbnb platform to promote their listings, which means that while Airbnbs have been reported to have negative effects on the hotel industry, it could potentially also benefit the boutique hotels. 3.3.4 room_type summary(listings$room_type) ## Private room Entire home/apt Shared room Hotel room ## 3206 3728 272 507 The room type is clearer on which listings are indeed individual homes, and which ones are hotel rooms. From the previous property_type summary, this was not as clear because of some overlaps in description of the listings. For example, under ‘Others’, there were a mix of different property types ranging from HDB flats to capsule hotels, to private homes and higher-end luxurious hotels. 3.3.5 reviews_per_month summary(listings$reviews_per_month) ## Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s ## 0.0100 0.1500 0.4300 0.9379 1.1400 29.1700 2812 describe(listings$reviews_per_month) ## vars n mean sd median trimmed mad min max range skew kurtosis se ## X1 1 4901 0.94 1.41 0.43 0.66 0.5 0.01 29.17 29.16 5.69 70.8 0.02 While we cannot ensure that every guest leaves a review, it can be used as a proxy to how many listings are flouting the law. For example, in a given private home listing, one would expect that the number of reviews for that listing per month should be a maximum of 1 review every 3 months (i.e. approximately 0.33 reviews per month). For a HDB listing, this number would be 0.17 reviews per month. However, as we can see from the summary of the descriptive statistics, the mean number of reviews per month for each listing is about 0.94, which is way higher than the expected number based on the law. As the law on short-term accommodations was only implemented on 6 Feb 2017 (Wong, 2017), it would only be fair to consider the number of reviews after the law was implemented. reviews_after_law_2017 &lt;- reviews %&gt;% filter(date &gt; &quot;2017-02-06&quot; &amp; date &lt; &quot;2018-01-01&quot;) reviews_after_law_2017 ## # A tibble: 16,277 x 6 ## listing_id id date reviewer_id reviewer_name comments ## &lt;dbl&gt; &lt;dbl&gt; &lt;date&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 71896 1.82e8 2017-08-13 122046660 Rainier Paolo &quot;The place was reall… ## 2 71903 1.36e8 2017-03-06 118189111 Lee &quot;Good for stay if yo… ## 3 71903 1.87e8 2017-08-27 70378982 Steve &quot;it was a quite nice… ## 4 71903 1.92e8 2017-09-08 92184943 Patrick &quot;Thank you very much… ## 5 241503 1.31e8 2017-02-07 75544959 Lili &quot;位于住宅区,交通便利,5分钟步行到地铁… ## 6 241503 1.32e8 2017-02-12 52156259 Jane &quot;The house is very g… ## 7 241503 1.32e8 2017-02-15 63292326 张瑜慧 &quot;很棒的一次体验,交通方便,房间卫生很干… ## 8 241503 1.33e8 2017-02-20 95569642 丽年 &quot;房东是个很优雅礼貌的美女,and al… ## 9 241503 1.34e8 2017-02-25 99030984 Tanya &quot;Never disappointed … ## 10 241503 1.35e8 2017-03-01 85029570 Yoshitaka &quot;comfortable stay in… ## # … with 16,267 more rows reviews_after_law_2018_2019 &lt;- reviews %&gt;% filter(date &gt; &quot;2017-12-31&quot; &amp; date &lt; &quot;2020-01-01&quot;) reviews_after_law_2020 &lt;- reviews %&gt;% filter(date &gt; &quot;2019-12-31&quot;) reviews_after_law_2017 &lt;- reviews_after_law_2017 %&gt;% group_by(listing_id) %&gt;% count() %&gt;% left_join(reviews_after_law_2017, by = &quot;listing_id&quot;) %&gt;% mutate(reviews_per_month = n / 11) # only 11 months considered reviews_after_law_2018_2019 &lt;- reviews_after_law_2018_2019 %&gt;% group_by(listing_id) %&gt;% count() %&gt;% left_join(reviews_after_law_2018_2019, by = &quot;listing_id&quot;) %&gt;% mutate(reviews_per_month = n / 12) # full year considered reviews_after_law_2020 &lt;- reviews_after_law_2020 %&gt;% group_by(listing_id) %&gt;% count() %&gt;% left_join(reviews_after_law_2020, by = &quot;listing_id&quot;) %&gt;% mutate(reviews_per_month = n / 3) # only 3 months considered reviews_after_law &lt;- rbind(reviews_after_law_2017, reviews_after_law_2018_2019, reviews_after_law_2020) reviews_after_law &lt;- reviews_after_law %&gt;% select(-n) reviews_after_law ## # A tibble: 88,113 x 7 ## # Groups: listing_id [4,605] ## listing_id id date reviewer_id reviewer_name comments ## &lt;dbl&gt; &lt;dbl&gt; &lt;date&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 71896 1.82e8 2017-08-13 122046660 Rainier Paolo &quot;The pl… ## 2 71903 1.36e8 2017-03-06 118189111 Lee &quot;Good f… ## 3 71903 1.87e8 2017-08-27 70378982 Steve &quot;it was… ## 4 71903 1.92e8 2017-09-08 92184943 Patrick &quot;Thank … ## 5 241503 1.31e8 2017-02-07 75544959 Lili &quot;位于住宅区,… ## 6 241503 1.32e8 2017-02-12 52156259 Jane &quot;The ho… ## 7 241503 1.32e8 2017-02-15 63292326 张瑜慧 &quot;很棒的一次体… ## 8 241503 1.33e8 2017-02-20 95569642 丽年 &quot;房东是个很优… ## 9 241503 1.34e8 2017-02-25 99030984 Tanya &quot;Never … ## 10 241503 1.35e8 2017-03-01 85029570 Yoshitaka &quot;comfor… ## # … with 88,103 more rows, and 1 more variable: reviews_per_month &lt;dbl&gt; summary(reviews_after_law$reviews_per_month) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.08333 1.45454 3.16667 3.91205 5.63636 18.33333 Surprisingly, the number of reviews per month for each listing was actually much more than when it was averaged out across the time period that the dataset contained (May 2011- Mar 2020). This not ony suggests the obvious that several listings are flouting the rules, but also shows that the policy may not have had much of an impact on how Airbnb hosts in Singapore rented out their flats. In fact, considering that there have only five individuals who have been fined under this law, it probably suggests that there has been little enforcement, or that the government is facing challenges in policing these illegal rentals. 3.3.6 minimum_nights Another variable of interest when it comes to whether listings might be flouting the law is the minimum night of stay. summary(listings$minimum_nights) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1.00 2.00 3.00 19.09 14.00 1000.00 describe(listings$minimum_nights) ## vars n mean sd median trimmed mad min max range skew kurtosis se ## X1 1 7713 19.09 45.57 3 8.43 2.97 1 1000 999 7.43 105.99 0.52 For minimum nights, we are mostly interested in listings that allow their guests to stay below 90 nights as these listing are likely the ones who are flouting the rules. Seeing that the mean number of nights of stay stands at 19.09 days, it shows that there are several illegal rentals going on. 3.3.7 planning_region summary(listings$planning_region) ## North Region Central Region East Region North-East Region ## 200 6252 447 310 ## West Region ## 504 ggplot(listings, aes(x = fct_infreq(planning_region), fill = room_type)) + geom_bar() + labs( title = &quot;No. of listings by region&quot;, x = &quot;Pln Region&quot;, y = &quot;No. of listings by region and room type&quot; ) + theme_light() If most listings are in the Central Region, it is quite possible that these listings target short-term stays, just as how many hotels are located centrally. ggplot(listings, aes(x = fct_infreq(planning_region), fill = property_type)) + geom_bar() + labs( title = &quot;No. of listings by region&quot;, x = &quot;Pln Region&quot;, y = &quot;No. of listings and property type&quot; ) + theme_light() 3.3.8 planning_area listings %&gt;% group_by(planning_area) %&gt;% summarize( num_listings = n(), region = unique(planning_region) ) %&gt;% top_n(n = 10, wt = num_listings) %&gt;% ggplot(aes( x = fct_reorder(planning_area, num_listings), y = num_listings, fill = region )) + geom_col() + coord_flip() + theme(legend.position = &quot;bottom&quot;) + labs( title = &quot;Top 10 neighbourhoods by no. of listings&quot;, x = &quot;Neighbourhood&quot;, y = &quot;No. of listings&quot; ) The above plot shows the top 10 neighbourhoods based on the number of listings. As expected, most of these neighbourhoods are from the central region, but it is interesting to note that Kallang and Geylang are the top two neighbourhoods as they are not exactly considered tourist hotspots. "],
["visualising-spatial-distribution-of-listings.html", "4 Visualising spatial distribution of Listings 4.1 By planning region 4.2 By property type 4.3 By minimum length of stay 4.4 By proximity to MRT stations", " 4 Visualising spatial distribution of Listings listings_sf &lt;- st_as_sf(listings, coords = c(&quot;longitude&quot;, &quot;latitude&quot;), crs = 4326) %&gt;% st_transform(3414) # convert coordinates to SVY21 pln_region_poly &lt;- read_sf(here::here(&quot;projdata/pln_boundary/MP14_REGION_WEB_PL.shp&quot;)) 4.1 By planning region tmap_mode(&quot;plot&quot;) ## tmap mode set to plotting tm_shape(listings_sf) + tm_symbols(col = &quot;planning_region&quot;, shape = 21, size = 0.1, border.col = &quot;grey21&quot;, border.lwd = 0.5, palette = &quot;Set2&quot;) + tm_shape(pln_region_poly) + tm_borders(col = &quot;black&quot;, lwd = 1, lty = &quot;solid&quot;) + tm_text(&quot;REGION_N&quot;, size = 0.8) + tm_layout(legend.outside = T) ## Warning: The shape pln_region_poly is invalid. See sf::st_is_valid Visualising all the listings in Singapore, it is clear that the central region has the most number of listings, and the north has the least. 4.2 By property type tm_shape(listings_sf) + tm_dots(col = &quot;property_type&quot;, size = 0.1, palette=&quot;Paired&quot;) + tm_shape(pln_region_poly) + tm_borders(col = &quot;black&quot;, lwd = 1, lty = &quot;solid&quot;) + tm_text(&quot;REGION_N&quot;, size = 0.8) + tm_layout(legend.outside = TRUE) ## Warning: The shape pln_region_poly is invalid. See sf::st_is_valid 4.3 By minimum length of stay below_90 &lt;- listings_sf %&gt;% filter(minimum_nights &lt; 89) # I used 89 instead of 90 because the variable counts the number of nights rather than days above_90 &lt;- listings_sf %&gt;% filter(minimum_nights &gt; 88) tm_shape(below_90) + tm_dots(col = &quot;red&quot;, size = 0.1) + tm_shape(above_90) + tm_dots(col = &quot;green&quot;, alpha = 0.4, size = 0.1) + tm_shape(pln_region_poly) + tm_borders(col = &quot;black&quot;, lwd = 1, lty = &quot;solid&quot;) + tm_text(&quot;REGION_N&quot;, size = 0.8) ## Warning: The shape pln_region_poly is invalid. See sf::st_is_valid In order to visualise areas where there are potentially more listings that are in violation of the law, we can group them based on the minimum length of stay, which is given by the minimum_nights variable. As it is not possible to distinguish between HDB flats and private homes, I used 90 days as the cut off point to differentiate listings that are compliant and those that are potentially errant. From the plot, it is clear that many listings are potentially illegal (red) as they require a minimum length of stay of less than 90 days. However, it is difficult to tell how the two types of listings vary between planning regions and neighbourhoods/planning areas. Therefore, we can use a bar chart to visualise this. length_stay &lt;- listings %&gt;% mutate(length_of_stay = case_when(minimum_nights &lt; 89 ~ &quot;below_90&quot;, minimum_nights &gt;88 ~&quot;above_90&quot;)) %&gt;% select(planning_area, planning_region, length_of_stay) ## Adding missing grouping variables: `host_id` length_stay ## # A tibble: 7,713 x 4 ## # Groups: host_id [2,530] ## host_id planning_area planning_region length_of_stay ## &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; &lt;chr&gt; ## 1 66406177 Marine Parade Central Region below_90 ## 2 66406177 Downtown Core Central Region below_90 ## 3 66406177 Marine Parade Central Region below_90 ## 4 66406177 Clementi West Region below_90 ## 5 66406177 Downtown Core Central Region below_90 ## 6 66406177 Clementi West Region below_90 ## 7 66406177 Downtown Core Central Region below_90 ## 8 66406177 Marine Parade Central Region below_90 ## 9 66406177 Clementi West Region below_90 ## 10 66406177 Downtown Core Central Region below_90 ## # … with 7,703 more rows ggplot(length_stay, aes(x = fct_infreq(planning_region), fill = length_of_stay)) + geom_bar() + labs( title = &quot;No. of listings by length of stay&quot;, x = &quot;Planning Region&quot;, y = &quot;No. of listings&quot; ) + theme_light() From this chart, it is clear that in every planning area, the proportion of listings that are potentially flouting the rules is significantly higher than those that are compliant. Since most of the listings are in the central area, it is unsurprising that the bulk of potentially errant listings are also situated there. ggplot(length_stay, aes(x = fct_infreq(planning_area), fill = length_of_stay)) + geom_bar() + labs( title = &quot;No. of listings by length of stay&quot;, x = &quot;Neighbourhood&quot;, y = &quot;No. of listings&quot; ) + facet_wrap(vars(planning_region), scales = &quot;free_y&quot;)+ coord_flip()+ theme_light() A breakdown of the listings by neighbourhoods reveals that almost all neighbourhoods have at least one errant listing, but in general, the trend seems to be that even within neighbourhoods, there are more potentially illegal listings as compared to compliant ones. 4.4 By proximity to MRT stations Another factor that could potentially explain the spatial distribution of these listings is their proximity to an MRT station. Therefore, I chose to overlay the MRT station data and analyse which listings are within reasonable walking distance of an MRT station. 4.4.1 Load MRT data stations &lt;- read_sf(here::here(&quot;projdata/MRTLRTStnPtt.shp&quot;)) glimpse(stations) ## Observations: 183 ## Variables: 4 ## $ OBJECTID &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1… ## $ STN_NAME &lt;chr&gt; &quot;EUNOS MRT STATION&quot;, &quot;CHINESE GARDEN MRT STATION&quot;, &quot;KHATIB M… ## $ STN_NO &lt;chr&gt; &quot;EW7&quot;, &quot;EW25&quot;, &quot;NS14&quot;, &quot;NS7&quot;, &quot;EW18&quot;, &quot;NS5&quot;, &quot;EW28&quot;, &quot;EW20&quot;,… ## $ geometry &lt;POINT [m]&gt; POINT (35782.96 33560.08), POINT (16790.75 36056.3), P… library(httr) library(osmdata) ## Data (c) OpenStreetMap contributors, ODbL 1.0. https://www.openstreetmap.org/copyright library(tmap) # MRT lines taken from OpenStreetMap here - https://wiki.openstreetmap.org/wiki/Mass_Rapid_Transit_%28Singapore%29 # the downtown line has id &#39;2313458&#39;, we can use this to download directly from OSM based on the id opq_osm_id(id = 2313458, type = &quot;relation&quot;) %&gt;% opq_string() %&gt;% osmdata_sf() %&gt;% .$osm_multilines ## Simple feature collection with 2 features and 17 fields ## geometry type: MULTILINESTRING ## dimension: XY ## bbox: xmin: 103.7494 ymin: 1.278394 xmax: 103.9659 ymax: 1.412542 ## epsg (SRID): 4326 ## proj4string: +proj=longlat +datum=WGS84 +no_defs ## osm_id name role ## 2313458-(no role) 2313458 MRT Downtown Line (Bukit Panjang --&gt; Expo) (no role) ## 2313458-inactive 2313458 MRT Downtown Line (Bukit Panjang --&gt; Expo) inactive ## colour from ## 2313458-(no role) #0354a6 Bukit Panjang ## 2313458-inactive #0354a6 Bukit Panjang ## name.en ## 2313458-(no role) MRT Downtown Line (Bukit Panjang --&gt; Expo) ## 2313458-inactive MRT Downtown Line (Bukit Panjang --&gt; Expo) ## name.zh network operator ## 2313458-(no role) 滨海市区线（武吉班让至博览） Singapore Rail SBS Transit ## 2313458-inactive 滨海市区线（武吉班让至博览） Singapore Rail SBS Transit ## public_transport.version ref route to type wheelchair ## 2313458-(no role) 2 DTL subway Expo route yes ## 2313458-inactive 2 DTL subway Expo route yes ## wikidata wikipedia geometry ## 2313458-(no role) Q1663943 en:Downtown MRT line MULTILINESTRING ((103.7569 ... ## 2313458-inactive Q1663943 en:Downtown MRT line MULTILINESTRING ((103.9572 ... # combine all MRT &amp; LRT lines into a single table lines &lt;- tribble( ~line, ~id, &quot;EW East Bound&quot;, 445764, &quot;EW West Bound&quot;, 2312796, &quot;NS North Bound&quot;, 445768, &quot;NS South Bound&quot;, 2312797, &quot;NE&quot;, 2293545, &quot;CC&quot;, 2076291, &quot;DT&quot;, 2313458, &quot;BP LRT&quot;, 1159434, &quot;SK LRT East Loop&quot;, 9663107, &quot;SK LRT West Loop&quot;, 1146941, &quot;PG LRT East Loop&quot;, 1146942, &quot;PG LRT West Loop&quot;, 2312984 ) # create a function to download the data from osm based on the relation id # logic cribbed from https://github.com/ropensci/osmdata/issues/95 download_mrt_line_from_osm &lt;- function(id) { opq_osm_id(id = id, type = &quot;relation&quot;) %&gt;% opq_string() %&gt;% osmdata_sf() %&gt;% .$osm_multilines } # apply function to all ids lines_sf &lt;- map(lines$id, download_mrt_line_from_osm) # check if we&#39;re succesful by plotting a single list element plot(lines_sf[[7]]) ## Warning: plotting the first 9 out of 17 attributes; use max.plot = 17 to plot ## all # combine all lines into a single sf object lines_sf &lt;- rbind_list(lines_sf) %&gt;% st_as_sf(crs = 4326) %&gt;% st_transform(3414) %&gt;% mutate_if(is.factor, as.character) ## Warning: &#39;rbind_list&#39; is deprecated. ## Use &#39;bind_rows()&#39; instead. ## See help(&quot;Deprecated&quot;) ## Warning in bind_rows_(list_or_dots(...), id = NULL): Vectorizing ## &#39;sfc_MULTILINESTRING&#39; elements may not preserve their attributes ## Warning in bind_rows_(list_or_dots(...), id = NULL): Vectorizing ## &#39;sfc_MULTILINESTRING&#39; elements may not preserve their attributes ## Warning in bind_rows_(list_or_dots(...), id = NULL): Vectorizing ## &#39;sfc_MULTILINESTRING&#39; elements may not preserve their attributes ## Warning in bind_rows_(list_or_dots(...), id = NULL): Vectorizing ## &#39;sfc_MULTILINESTRING&#39; elements may not preserve their attributes ## Warning in bind_rows_(list_or_dots(...), id = NULL): Vectorizing ## &#39;sfc_MULTILINESTRING&#39; elements may not preserve their attributes ## Warning in bind_rows_(list_or_dots(...), id = NULL): Vectorizing ## &#39;sfc_MULTILINESTRING&#39; elements may not preserve their attributes ## Warning in bind_rows_(list_or_dots(...), id = NULL): Vectorizing ## &#39;sfc_MULTILINESTRING&#39; elements may not preserve their attributes ## Warning in bind_rows_(list_or_dots(...), id = NULL): Vectorizing ## &#39;sfc_MULTILINESTRING&#39; elements may not preserve their attributes ## Warning in bind_rows_(list_or_dots(...), id = NULL): Vectorizing ## &#39;sfc_MULTILINESTRING&#39; elements may not preserve their attributes ## Warning in bind_rows_(list_or_dots(...), id = NULL): Vectorizing ## &#39;sfc_MULTILINESTRING&#39; elements may not preserve their attributes ## Warning in bind_rows_(list_or_dots(...), id = NULL): Vectorizing ## &#39;sfc_MULTILINESTRING&#39; elements may not preserve their attributes ## Warning in bind_rows_(list_or_dots(...), id = NULL): Vectorizing ## &#39;sfc_MULTILINESTRING&#39; elements may not preserve their attributes tm_shape(lines_sf) + tm_lines(col = &quot;colour&quot;) write_sf(lines_sf, &quot;mrt_lines.shp&quot;) ## Warning in abbreviate_shapefile_names(obj): Field names abbreviated for ESRI ## Shapefile driver ## Warning in CPL_write_ogr(obj, dsn, layer, driver, ## as.character(dataset_options), : GDAL Message 1: One or several characters ## couldn&#39;t be converted correctly from UTF-8 to ISO-8859-1. This warning will not ## be emitted anymore. library(mapedit) library(mapview) First we can create a buffer around the MRT stations. I used a buffer of 800m as it is of a reasonable walking distance (10 minutes walk). stations %&gt;% st_buffer(800) %&gt;% # map units are in meter mapview() station_800m &lt;- stations %&gt;% st_buffer(800) # create 800 m buffer around each station station_800m_union &lt;- st_union(station_800m) # join buffer into one layer mapview(station_800m_union) listings_sf &lt;- st_as_sf(listings, coords = c(&quot;longitude&quot;, &quot;latitude&quot;)) %&gt;% st_set_crs(&quot;+proj=longlat +datum=WGS84&quot;) %&gt;% # projection we start from st_transform(station_800m_union %&gt;% st_crs()) # projection we want to get to station_800m_union &lt;- st_set_crs(station_800m_union, 3414) %&gt;% st_transform(listings_sf %&gt;% st_crs()) ## Warning: st_crs&lt;- : replacing crs does not reproject data; use st_transform for ## that # obtain listings within 800m of MRT p &lt;- st_intersects(station_800m_union, listings_sf, sparse = F) %&gt;% as.vector() listings_buffer &lt;- listings_sf[p,] count_800 &lt;- 4537 # obtain listings beyond 800m of MRT p_out &lt;- st_disjoint(station_800m_union, listings_sf, sparse = F) %&gt;% as.vector() listings_outside_buffer &lt;- listings_sf[p_out,] count_out_800 &lt;- 3176 tm_shape(lines_sf) + tm_lines(col = &quot;colour&quot;, lwd = 2) + tm_shape(stations) + tm_dots(size = 0.4, col = &quot;black&quot;) + tm_shape(listings_buffer) + tm_dots(col=&quot;blue&quot;, size = 0.2, alpha=0.5) + tm_shape(listings_outside_buffer) + tm_dots(col=&quot;orange&quot;, size = 0.2, alpha=0.5) + tm_shape(pln_region_poly) + tm_borders(col = &quot;black&quot;, lwd = 1, lty = &quot;solid&quot;) + tm_text(&quot;REGION_N&quot;, size = 0.8) ## Warning: The shape pln_region_poly is invalid. See sf::st_is_valid 4.4.2 Assessing prices of listings based on proximity to MRT 4.4.2.1 Within 800m range listings_buffer_filter &lt;- listings_buffer %&gt;% filter(price &lt; 1000) count_800_f &lt;- 4513 summary(listings_buffer_filter$price) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 14.0 67.0 128.0 152.3 199.0 998.0 describe(listings_buffer_filter$price) ## vars n mean sd median trimmed mad min max range skew kurtosis se ## X1 1 6363 152.33 119.48 128 133.98 93.4 14 998 984 2.21 7.53 1.5 mean_800 &lt;- 151.2 median_800 &lt;- 126.0 min_800 &lt;-14 max_800 &lt;- 998 skew_800 &lt;- 2.26 listings_buffer_filter %&gt;% ggplot() + geom_histogram(aes(x = price), binwidth = 10) 4.4.2.2 Outside 800m range listings_outside_buffer_filter &lt;- listings_outside_buffer %&gt;% filter(price &lt; 1000) count_out_800_f &lt;- 3148 summary(listings_outside_buffer_filter$price) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 14.0 59.0 110.0 138.2 170.0 988.0 describe(listings_outside_buffer_filter$price) ## vars n mean sd median trimmed mad min max range skew kurtosis se ## X1 1 1298 138.24 116.42 110 117.25 77.1 14 988 974 2.62 9.47 3.23 mean_800_out &lt;- 148.1 median_800_out &lt;- 120.0 min_800_out &lt;-14 max_800_out &lt;- 988 skew_800_out &lt;- 2.28 A quick glance at the descriptive statistics on the price variable shows us that the median is lower than the mean, and the skew is positive. This is unsurprising considering that the Airbnb hosts can generally choose how they want to price their listings. Furthermore, the dataset includes listings that are either entire home/apartments, private rooms, or hotel rooms, and within these types, are different types of houses such as bungalows, apartments, condominiums, which would affect the prices too. Since in the context of the law, where HDB flats are only allowed to be rented out for a period of six consecutive months, or 180 days, to non-tourists, while private homes have to fulfill a minimum rental length of three consecutive months or 90 days, it is safe to expect more of these listings to be private homes as it is easier to rent them out. This could explain the right skew. Visually, this is how it looks: listings_outside_buffer_filter %&gt;% ggplot() + geom_histogram(aes(x = price), binwidth = 10) 4.4.2.3 Comparing prices Description Within 800m Outside 800m n 4537 3176 n without outliers 4513 3148 mean 151.2 148.1 median 126 120 min 14 14 max 998 988 skew 2.26 2.28 As expected, there are more listings within 800m walking distance than outside, though the difference is not extremely huge. Mean prices of Airbnbs are slightly higher (by $3.10) for listings within the 800m buffer, but the prices are not significantly higher. Perhaps, beyond the 800m buffer, many listings are also served by buses. tm_shape(listings_sf) + tm_dots(col = &quot;price&quot;, size = 0.1, palette=&quot;YlGnBu&quot;, breaks=c(0,50,100,150,200,250,300,350,400,500,600,1000,10000)) + tm_shape(pln_region_poly) + tm_borders(col = &quot;black&quot;, lwd = 1, lty = &quot;solid&quot;) + tm_text(&quot;REGION_N&quot;, size = 0.8) + tm_layout(legend.outside = TRUE) ## Warning: The shape pln_region_poly is invalid. See sf::st_is_valid "],
["principal-component-analysis-pca.html", "5 Principal Component Analysis (PCA) 5.1 Extract components &amp; scale data 5.2 PCA using varimax 5.3 Reflections on PCA", " 5 Principal Component Analysis (PCA) For this section, I plan to use PCA to understand how the different variables may be correlated. This may provide some insight into the pricing and spatial distribution of the Airbnb listings, which may have been difficult to visualise from the previous sections. library(tidyverse) library(broom) library(ggfortify) library(psych) library(patchwork) listings &lt;- readRDS(here::here(&quot;projdata/listings.rds&quot;)) 5.1 Extract components &amp; scale data The following variables were selected: host_response_rate, host_acceptance_rate, host_listings_count, minimum_nights, price, reviews_per_month and review_scores_rating. These variables were selected mostly because they are the few continuous variables in the dataset that would potentially have some effect on one another. pc &lt;- listings %&gt;% mutate(host_response_rate = as.numeric(host_response_rate), host_acceptance_rate=as.numeric(host_acceptance_rate), host_listings_count=as.numeric(host_listings_count)) %&gt;% drop_na() %&gt;% select(minimum_nights, price, reviews_per_month, review_scores_rating, host_acceptance_rate, host_listings_count, host_response_rate) %&gt;% prcomp(., center=T, scale.=T) ## Warning: NAs introduced by coercion ## Warning: NAs introduced by coercion tidy(pc, &quot;pcs&quot;) ## # A tibble: 7 x 4 ## PC std.dev percent cumulative ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 1.18 0.199 0.199 ## 2 2 1.14 0.185 0.385 ## 3 3 1.04 0.155 0.540 ## 4 4 1.01 0.146 0.685 ## 5 5 0.916 0.120 0.805 ## 6 6 0.843 0.101 0.907 ## 7 7 0.808 0.0932 1 listings2 &lt;- listings %&gt;% mutate(host_response_rate = as.numeric(host_response_rate), host_acceptance_rate=as.numeric(host_acceptance_rate), host_listings_count=as.numeric(host_listings_count)) %&gt;% drop_na() %&gt;% select(minimum_nights, price, reviews_per_month, review_scores_rating, reviews_per_month, host_acceptance_rate, host_listings_count, host_response_rate, planning_region) ## Warning: NAs introduced by coercion ## Warning: NAs introduced by coercion As I wanted to include planning areas in the components, there was a need to train the data such that they were presented as numerical (1s and 0s), which would then allow for the joining to the other components for analysis. library(caret) ## Loading required package: lattice ## ## Attaching package: &#39;caret&#39; ## The following object is masked from &#39;package:httr&#39;: ## ## progress ## The following object is masked from &#39;package:purrr&#39;: ## ## lift plnreg &lt;- listings2 %&gt;% drop_na() %&gt;% select(planning_region) dummy_model &lt;- dummyVars(~ ., data = plnreg) dummy_sample &lt;- predict(dummy_model, newdata = plnreg) %&gt;% as_tibble() # rename columns dummy_sample &lt;- dummy_sample %&gt;% rename(reg_central = `planning_regionCentral Region`, reg_north= `planning_regionNorth Region`, reg_east = `planning_regionEast Region`, reg_west=`planning_regionWest Region`, reg_northeast=`planning_regionNorth-East Region`) pc &lt;- cbind(listings2, dummy_sample) %&gt;% select(-planning_region) %&gt;% prcomp(., center=T, scale.=T) tidy(pc, &quot;pcs&quot;) ## # A tibble: 12 x 4 ## PC std.dev percent cumulative ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 1.42e+ 0 0.167 0.167 ## 2 2 1.20e+ 0 0.119 0.287 ## 3 3 1.13e+ 0 0.107 0.394 ## 4 4 1.04e+ 0 0.0897 0.483 ## 5 5 1.03e+ 0 0.0879 0.571 ## 6 6 1.01e+ 0 0.0853 0.657 ## 7 7 9.87e- 1 0.0812 0.738 ## 8 8 9.84e- 1 0.0806 0.818 ## 9 9 9.10e- 1 0.0690 0.887 ## 10 10 8.39e- 1 0.0587 0.946 ## 11 11 8.04e- 1 0.0539 1 ## 12 12 2.37e-15 0 1 tidy(pc, &quot;pcs&quot;) %&gt;% ggplot(aes(x=PC, y=cumulative)) + geom_line() + geom_hline(yintercept=0.9, col=&quot;blue&quot;) + geom_text(aes(x=PC, y=cumulative, label=PC), nudge_y = 0.03) The scree plot above shows the cumulative variance of the components and a threshold line of 90% explained variance (blue). From the plot, we can see that 90% of the variance is explained somewhere around the ninth component. Hence, I start off by keeping nine components. However, I do note that the scree plot is not exactly very clear (it seems almost linear for most part), perhaps due to the inclusion of the planning regions as components. tidy(pc, &quot;variables&quot;) %&gt;% spread(key = &quot;PC&quot;, value=&quot;value&quot;) ## # A tibble: 12 x 13 ## column `1` `2` `3` `4` `5` `6` `7` `8` ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 host_… -0.146 0.488 0.364 -0.0547 0.149 -2.44e-3 -0.161 0.150 ## 2 host_… -0.185 -0.322 0.538 0.0266 0.0565 -3.72e-4 0.199 0.223 ## 3 host_… -0.144 0.364 0.509 0.0732 0.00633 -1.31e-1 -0.0229 0.233 ## 4 minim… 0.0729 -0.238 0.333 -0.392 0.287 1.37e-1 -0.0390 -0.401 ## 5 price -0.196 -0.118 -0.00115 0.159 -0.620 -4.46e-2 0.356 0.257 ## 6 reg_c… -0.680 -0.0432 -0.148 -0.0905 0.0682 2.37e-2 -0.0345 -0.148 ## 7 reg_e… 0.371 0.216 0.197 0.473 -0.0954 4.86e-1 0.184 -0.285 ## 8 reg_n… 0.209 0.0256 -0.0106 0.295 0.273 -7.96e-1 0.212 -0.140 ## 9 reg_n… 0.289 0.0801 -0.198 -0.365 0.326 1.66e-1 0.388 0.589 ## 10 reg_w… 0.383 -0.222 0.189 -0.237 -0.408 -1.90e-1 -0.537 0.176 ## 11 revie… 0.0751 0.132 0.166 -0.496 -0.324 -1.53e-1 0.517 -0.372 ## 12 revie… -0.00806 0.577 -0.213 -0.239 -0.206 -7.39e-2 -0.141 -0.0901 ## # … with 4 more variables: `9` &lt;dbl&gt;, `10` &lt;dbl&gt;, `11` &lt;dbl&gt;, `12` &lt;dbl&gt; tidy(pc, &quot;variables&quot;) %&gt;% filter(PC &lt; 10) %&gt;% ggplot(aes(x=column, y=value))+ geom_hline(yintercept = 0) + geom_col(aes(fill=(value&gt;=0)), show.legend = FALSE)+ coord_flip() + facet_grid(~PC) The first component shows that for a positive value for all planning regions other than the central region, reg_central showed a very low value. This suggests that the central region is very different from the other regions, and is perhaps a reflection of the number of listings that are within the central region, which is way more than in other regions. price also showed a low value, which probably suggests that prices are significantly different in the central region as compared to the other regions. Althought we established earlier that price difference were marginal, it could be that this model takes into account the outliers in the Southern Islands, which cost almost $10,000 per night. This amount is nearly 100 times the mean price of an Airbnb in Singapore. We also see a correlation between the host_response_rate and host_acceptance_rate with the reg_central. While these variables were not really explored earlier, it could provide important information, that the listings in the central area are more active than in other areas. Interestingly, a positive value for minimum_nights yield a negative value for reg_central but positive value for all other regions. This could mean that either the central region or the rest of Singapore is more likely to flout the rules. However, on hindsight, this could be a reflection of the sheer number of listings in the central region. Therefore, it may have a lot more listings with minimum_nights that are low as compared to the number of listings of the same kind in the other parts of Singapore. Therefore we can only conclude from the first component that the central area is very different from the other areas in terms of price, minimum_nights, host_response_rate and host_acceptance_rate. The second component shows that a low value for minimum_nights corresponds to a high value for reviews_per_month, which makes sense because reviews would be more frequent if the length of stay is shorter. It then adds a nuance to the first component by showing that reg_west is somewhat like reg_central in terms of price, minimum_nights and host_listings_count. The correlation with price can be explained by an outlier listing in Tuas that costs almost as much as those in the Southern Islands. The high reviews_per_month is also correlated with the reg_east and east, which suggests that these regions also have a high number of listings that potentially are flouting the rules. The third component shows that the east and west regions have the different ratings from the other regions, and does not add much more nuance from here on. Therefore, while the scree plot suggested to keep 9 components, perhaps three would have been sufficient. autoplot(pc, label=F, x=1, y=2, loadings = T, loadings.label=T) From the loadings plot I can confirm that the central region is very different from the rest of Singapore, but it is generally quite difficult to read. 5.2 PCA using varimax fa &lt;- cbind(listings2, dummy_sample) %&gt;% select(-planning_region) %&gt;% principal(nfactors=3, rotate=&quot;varimax&quot;) ## Warning in log(det(r)): NaNs produced ## In factor.stats, the correlation matrix is singular, an approximation is used ## Warning in fa.stats(r = r, f = f, phi = phi, n.obs = n.obs, np.obs = np.obs, : ## In factor.stats, the correlation matrix is singular, and we could not calculate ## the beta weights for factor score estimates ## Warning in principal(., nfactors = 3, rotate = &quot;varimax&quot;): The matrix is not ## positive semi-definite, scores found from Structure loadings fa ## Principal Components Analysis ## Call: principal(r = ., nfactors = 3, rotate = &quot;varimax&quot;) ## Standardized loadings (pattern matrix) based upon correlation matrix ## RC1 RC3 RC2 h2 u2 com ## minimum_nights 0.09 0.05 0.47 0.235 0.765 1.1 ## price -0.30 -0.05 0.08 0.097 0.903 1.2 ## reviews_per_month 0.07 0.31 -0.66 0.536 0.464 1.4 ## review_scores_rating 0.14 0.22 0.03 0.072 0.928 1.7 ## host_acceptance_rate -0.08 0.73 -0.13 0.554 0.446 1.1 ## host_listings_count -0.27 0.21 0.69 0.589 0.411 1.5 ## host_response_rate -0.09 0.74 0.09 0.564 0.436 1.1 ## reg_central -0.97 0.00 -0.13 0.958 0.042 1.0 ## reg_east 0.58 0.25 0.00 0.393 0.607 1.4 ## reg_north 0.30 -0.04 -0.02 0.089 0.911 1.0 ## reg_northeast 0.40 -0.16 -0.21 0.227 0.773 1.9 ## reg_west 0.51 -0.12 0.37 0.411 0.589 1.9 ## ## RC1 RC3 RC2 ## SS loadings 1.99 1.38 1.36 ## Proportion Var 0.17 0.11 0.11 ## Cumulative Var 0.17 0.28 0.39 ## Proportion Explained 0.42 0.29 0.29 ## Cumulative Proportion 0.42 0.71 1.00 ## ## Mean item complexity = 1.4 ## Test of the hypothesis that 3 components are sufficient. ## ## The root mean square of the residuals (RMSR) is 0.11 ## with the empirical chi square 6435.22 with prob &lt; 0 ## ## Fit based upon off diagonal values = 0.36 fa[[&#39;loadings&#39;]] %&gt;% unclass() %&gt;% as_tibble(rownames=&quot;listings&quot;) %&gt;% gather(key=&quot;component&quot;, value=&quot;value&quot;, -listings) %&gt;% ggplot(aes(x=listings, y=value))+ geom_hline(yintercept = 0)+ geom_col(aes(fill=(value&gt;=0)), show.legend=FALSE)+ ylim(-1,1)+ coord_flip()+ facet_grid(~component) | tidy(pc, &quot;variables&quot;) %&gt;% filter(PC &lt; 4) %&gt;% ggplot(aes(x=column, y=value))+ geom_hline(yintercept = 0) + geom_col(aes(fill=(value&gt;=0)), show.legend = FALSE)+ coord_flip() + facet_grid(~PC) Based on the previous analysis, I changed the number of components to 3 for the varimax method. The conclusions are the same for the first component as seen from the above plot. For the second component, we see a similar patterm that a low value for minimum_nights corresponds to a high value for reviews_per_month, which makes sense because reviews would be more frequent if the length of stay is shorter. However, we see that the west is different from the north-east and central regions in terms of reviews per month and host acceptance rate. Low reviews per month in the west suggests that a higher likelihood of flouting the rules. For the varimax method, it shows that the east region is quite different from the other regions and it correlated with the other variables except for price. This highlights that prices in the east could be very different from the rest of Singapore. 5.3 Reflections on PCA I find that to some extent, performing PCA was helpful in understanding and confirming which variables were correlated and which were not. Because of the added dimension, it helped me draw links between variables I did not think were related. However the challenge was in deciding the number of components to keep. While the scree plot shows that 9 components, I found that it was not very meaningful to go beyond 3 components. My guess is that the scree plot was not a good indication because of the planning regions that I added in as variables. However, there was some useful analysis, that helped to confirm what I found in the previous section, and also gives room for further exploration into other variables that I did not really delve into for this project. "],
["spatial-clustering.html", "6 Spatial Clustering 6.1 Aggregation to larger spatial units 6.2 Clustering of minimum_nights variable 6.3 Clustering of price variable 6.4 Reflection on Spatial Clustering", " 6 Spatial Clustering library(tidyverse) library(dplyr) library(here) library(sf) library(tmap) library(psych) listings &lt;- readRDS(here::here(&quot;projdata/listings.rds&quot;)) 6.1 Aggregation to larger spatial units To analyse the data spatially, I will be aggregating Singapore’s planning area data with the airbnb dataset. planning_areas &lt;- st_read(here::here(&quot;projdata/MP14_PLNG_AREA_NO_SEA_PL.shp&quot;)) %&gt;% filter(!(OBJECTID == 49 | OBJECTID == 18)) # remove islands ## Reading layer `MP14_PLNG_AREA_NO_SEA_PL&#39; from data source `/Users/jeancjw/Documents/SUTD/MUSPP/02.522 Urban Data &amp; Methods II CUA/cua-jeanette-c/projdata/MP14_PLNG_AREA_NO_SEA_PL.shp&#39; using driver `ESRI Shapefile&#39; ## Simple feature collection with 55 features and 12 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33 ## epsg (SRID): NA ## proj4string: +proj=tmerc +lat_0=1.366666666666667 +lon_0=103.8333333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +datum=WGS84 +units=m +no_defs listings_sf &lt;- st_as_sf(listings, coords = c(&quot;longitude&quot;, &quot;latitude&quot;)) %&gt;% st_set_crs(&quot;+proj=longlat +datum=WGS84&quot;) %&gt;% # projection we start from st_transform(planning_areas %&gt;% st_crs()) # projection we want to get to saveRDS(listings_sf, here::here(&quot;projdata/listings_sf.rds&quot;)) listings_sf &lt;- listings_sf %&gt;% filter(host_id != &quot;122991242&quot;) %&gt;% filter(host_id != &quot;32502212&quot;) Two listings in the west were removed as they could not be connected to build the minimum spanning tree. hex_grid &lt;- planning_areas %&gt;% st_make_grid(st_bbox(.), square = FALSE, cellsize = 1500) %&gt;% # setting the sq to false means hex, and each hex is 1500m in size st_sf() %&gt;% mutate(hex_id = row_number()) tm_shape(hex_grid) + tm_polygons() listings_hex &lt;- st_join(listings_sf, hex_grid) %&gt;% st_set_geometry(NULL) 6.2 Clustering of minimum_nights variable Referring to the plot below, we can see that plotting the entire range of minimum_nights returns a plot that can shows that there is not much spatial clustering going on. It only shows us that majority of the listings across Singapore are likely to be flouting the rules as the average minimum length of stay is between 0-100 days. This is also what was seen in the previous section. min_nights &lt;- listings_hex %&gt;% group_by(hex_id) %&gt;% summarise(min_nights = mean(minimum_nights)) %&gt;% left_join(hex_grid, .) %&gt;% filter(min_nights &gt; 0 ) ## Joining, by = &quot;hex_id&quot; tm_shape(min_nights) + tm_fill(col = &quot;min_nights&quot;, breaks=c(0,30,60,90,120,150,180,210,240,270,300,330, 360,390,420,450,480,510,540,570, 600), palette = &quot;YlOrRd&quot;) + tm_borders() However, if the listing is a HDB flat, a better indicator would be a length of stay requirement that is below 180 days. While we cannot acertain from the clustering which listings are HDB flats, we can make an educated guess based on which areas are usually where HDB estates are located. Furthermore, it could also be the case where an owner only rents their home out through airbnb for the minimum length stated, and then extends the rental beyond that without going through the platform. Hence it would be interesting to look at finer-grain detail of the average minimum length of stay by setting the plot to display a maximum of 179 nights. min_nights_180 &lt;- listings_hex %&gt;% group_by(hex_id) %&gt;% summarise(min_nights = mean(minimum_nights)) %&gt;% left_join(hex_grid, .) %&gt;% filter(min_nights &lt; 180) ## Joining, by = &quot;hex_id&quot; tmap_mode(&quot;plot&quot;) ## tmap mode set to plotting tm_shape(min_nights_180) + tm_polygons(col = &quot;min_nights&quot;, palette = &quot;YlOrRd&quot;, alpha=0.7) A large majority of areas still have listings that require an average minimum length of stay of 0-40 nights, and those that require at least longer length of stays are at the peripherals and away from the city centre. In fact, the city centre consists only of shorter-term stays up to a maximum of 60 days. This is not surprising because given the context of Singapore, the Central area is known to be where the more expensive neighbourhoods are, and where there are more private estates. The planning areas in the periphery with higher requirements for the minimum length of stay seem to be where HDB estates are. By zooming into these areas, we can see that many of them are indeed around HDB estates. Therefore, it seems that the number listings that are possibly flouting the rules are more than what was previously estimated when only those withi minimum length of stay below 90 days were taken into account. 6.2.1 Building the Minimum Spanning Tree library(spdep) ## Loading required package: sp ## Loading required package: spData ## To access larger datasets in this package, install the spDataLarge ## package with: `install.packages(&#39;spDataLarge&#39;, ## repos=&#39;https://nowosad.github.io/drat/&#39;, type=&#39;source&#39;)` hex_sp_nights &lt;- as(min_nights_180, &quot;Spatial&quot;) hex_neighbours_nights &lt;- poly2nb(hex_sp_nights) # visually inspect neighbours plot(hex_neighbours_nights, coordinates(hex_sp_nights)) cluster_data_nights &lt;- min_nights_180 %&gt;% st_set_geometry(NULL) %&gt;% select(min_nights) hex_edge_costs_nights &lt;- nbcosts(hex_neighbours_nights, cluster_data_nights) hex_edge_weights_nights &lt;- nb2listw(hex_neighbours_nights, hex_edge_costs_nights, style = &quot;B&quot;) hex_mst_nights &lt;- mstree(hex_edge_weights_nights) plot(hex_mst_nights, coordinates(hex_sp_nights)) 6.2.2 Clustering with SKATER # deciding the number of clusters hex_skater_elbow &lt;- skater(hex_mst_nights[, 1:2], cluster_data_nights, ncuts = 40 ) tibble( x = 0:40, y = hex_skater_elbow$ssw ) %&gt;% ggplot() + geom_line(aes(x = x, y = y)) + ylim(0, max(hex_skater_elbow$ssw)) + geom_vline(xintercept = 3, linetype = &quot;dashed&quot;, col = &quot;blue&quot;) + geom_vline(xintercept = 15, linetype = &quot;dashed&quot;, col = &quot;blue&quot;) + theme_light() Here the elbow plot is not very clear of what the appropriate number of clusters is. It seems to be between 3-15, which is quite a wide range. I will start by creating 3 clusters. hex_skater_k3 &lt;- skater(hex_mst_nights[, 1:2], cluster_data_nights, ncuts = 2, crit=15) min_nights_180$cluster &lt;- as.character(hex_skater_k3$groups) tm_shape(min_nights_180) + tm_polygons(col = &quot;cluster&quot;) With three clusters made up of a minimum of 15 hexagons, the plot generalises the clusters too much. hex_skater_k15 &lt;- skater(hex_mst_nights[, 1:2], cluster_data_nights, ncuts = 14, crit=6) min_nights_180$cluster &lt;- as.character(hex_skater_k15$groups) tm_shape(min_nights_180) + tm_polygons(col = &quot;cluster&quot;) The clusters become more defined when increased to 15, but to avoid single-hexagon clusters, which may not be helpful, the minimum number of of hexagons in each cluster was set to 6. Despite so, there are too many clusters, and it is not helpful for our understanding of the average minimum length of stay. hex_skater_k10 &lt;- skater(hex_mst_nights[, 1:2], cluster_data_nights, ncuts = 9, crit=6) min_nights_180$cluster &lt;- as.character(hex_skater_k10$groups) tm_shape(min_nights_180) + tm_polygons(col = &quot;cluster&quot;) Similarly, adjusting the number of clusters to 10 has also not added much value to the analyses. Perhaps, in the case of the minimum_nights variable, there may not be any significant clusters. In fact, it might be more helpful to just show the distribution of the listings with minimum length of stay below 90 days and above 90 days. 6.3 Clustering of price variable price &lt;- listings_hex %&gt;% group_by(hex_id) %&gt;% summarise(price = mean(price)) %&gt;% left_join(hex_grid, .) %&gt;% filter(price &gt; 0) ## Joining, by = &quot;hex_id&quot; saveRDS(price, here::here(&quot;projdata/price.rds&quot;)) tm_shape(price) + tm_fill(col = &quot;price&quot;, breaks=c(0, 50, 100, 150, 200, 300, 400, 500, 600, 700,800,900,1000, 1100, 1200, 1300, 1400), palette = &quot;YlGnBu&quot;) + tm_borders() ## Warning: Values have found that are higher than the highest break 6.3.1 Building the Minimum Spanning Tree hex_sp_price &lt;- as(price, &quot;Spatial&quot;) hex_neighbours_price &lt;- poly2nb(price) # visually inspect neighbours plot(hex_neighbours_price, coordinates(hex_sp_price)) cluster_data_price &lt;- price %&gt;% st_set_geometry(NULL) %&gt;% select(price) hex_edge_costs_price&lt;- nbcosts(hex_neighbours_price, cluster_data_price) hex_edge_weights_price &lt;- nb2listw(hex_neighbours_price, hex_edge_costs_price, style = &quot;B&quot;) hex_mst_price &lt;- mstree(hex_edge_weights_price) plot(hex_mst_price, coordinates(hex_sp_price)) 6.3.2 Clustering with SKATER # deciding the number of clusters hex_skater_elbow_price &lt;- skater(hex_mst_price[, 1:2], cluster_data_price, ncuts = 40 ) tibble( x = 0:40, y = hex_skater_elbow_price$ssw ) %&gt;% ggplot() + geom_line(aes(x = x, y = y)) + ylim(0, max(hex_skater_elbow_price$ssw)) + geom_vline(xintercept = 4, linetype = &quot;dashed&quot;, col = &quot;blue&quot;) + theme_light() From the elbow plot it can be gathered that the optimal number of clusters is around 4. hex_skater_k4 &lt;- skater(hex_mst_price[, 1:2], cluster_data_price, ncuts = 3) price$cluster &lt;- as.character(hex_skater_k4$groups) tm_shape(price) + tm_polygons(col = &quot;cluster&quot;) Without setting the minimum number of hexagons, the plot only picks out the areas with extremely high values. This is because there are a few hexagons that are outliers with high average prices. hex_skater_k4 &lt;- skater(hex_mst_price[, 1:2], cluster_data_price, ncuts = 3, crit = 25) price$cluster &lt;- as.character(hex_skater_k4$groups) tm_shape(price) + tm_polygons(col = &quot;cluster&quot;) 6.4 Reflection on Spatial Clustering Overall, I found that spatial clustering was not necessary or helpful in analysis the data. Most of the information derived from here could be simply plotting the spatial distribution of listings as was done in Section 4. Clustering was inconclusive overall, especially since I was looking at Airbnb prices, where there were significant outliers, while mean prices across Singapore seem to have little differences in general. When I performed the same analysis on the minimum nights, I realised it did not help to answer my research question because I was mostly keen to find out which listings were being rented out for less than 90 days, and which were being rented out for 90 days and above. With this in mind, there was no need to further cluster the listings, and it was more helpful to just look at these two categories of listings and where they were spatially located. "],
["spatial-autocorrelation.html", "7 Spatial Autocorrelation 7.1 Moran’s I 7.2 Local value of autocorrelation", " 7 Spatial Autocorrelation library(tidyverse) library(dplyr) library(here) library(sf) library(tmap) library(spdep) price &lt;- readRDS(here::here(&quot;projdata/price.rds&quot;)) hex_sp &lt;- as(price, &quot;Spatial&quot;) hex_neighbours &lt;- poly2nb(hex_sp) # visually inspect neighbours plot(hex_neighbours, coordinates(hex_sp)) hex_weights &lt;- nb2listw(hex_neighbours, style = &quot;W&quot;, zero.policy = TRUE) price_lag &lt;- lag.listw(hex_weights, hex_sp$price) price_lag_df &lt;- price %&gt;% add_column(price_lag = price_lag) current.mode &lt;- tmap_mode(&quot;plot&quot;) ## tmap mode set to plotting tm_shape(price_lag_df) + tm_fill(breaks=c(0,50,100,200,300,400,500,600), col = &quot;price_lag&quot;, palette=&quot;YlGnBu&quot;) + tm_borders() ## Warning: Values have found that are higher than the highest break 7.1 Moran’s I ggplot(price_lag_df, aes(x=price, y =price_lag))+ geom_point() + geom_smooth(method=lm) ## `geom_smooth()` using formula &#39;y ~ x&#39; lm(price_lag ~ price, data=price_lag_df) ## ## Call: ## lm(formula = price_lag ~ price, data = price_lag_df) ## ## Coefficients: ## (Intercept) price ## 120.0737 0.3152 Generally, there is a positive correlation between the price_lag and price variable, but the error increases as we go along due to the huge variation in prices of listings. moran.test(price_lag_df$price, hex_weights) ## ## Moran I test under randomisation ## ## data: price_lag_df$price ## weights: hex_weights ## ## Moran I statistic standard deviate = 9.4697, p-value &lt; 2.2e-16 ## alternative hypothesis: greater ## sample estimates: ## Moran I statistic Expectation Variance ## 0.315157154 -0.005263158 0.001144906 Under the Moran I test, we can confirm that there is a significant positive autocorrelation between the residuals. 7.2 Local value of autocorrelation moran_local &lt;- localmoran(price_lag_df$price, hex_weights) price_lag_df$moran &lt;- moran_local[,1] tm_shape(price_lag_df) + tm_polygons(col = &quot;moran&quot;, palette = &quot;-RdBu&quot;) ## Variable &quot;moran&quot; contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette. From here, we can see a hot spot where prices are extremely high in the southern islands. "],
["spatial-regression.html", "8 Spatial Regression 8.1 Setting up the regression 8.2 Reflection on Spatial Autocorrelation/Regression Method", " 8 Spatial Regression 8.1 Setting up the regression planning_areas_sf &lt;- planning_areas planning_areas &lt;- read_csv(here::here(&quot;data/planning_areas.csv&quot;)) %&gt;% left_join(planning_areas_sf, ., by = c(&quot;PLN_AREA_N&quot; = &quot;planning_area&quot;)) %&gt;% filter(area_hdb &gt; 0) %&gt;% # keep the areas where there are HDB st_buffer(0) # we use this to correct shapefile issues ## Parsed with column specification: ## cols( ## .default = col_double(), ## planning_area = col_character() ## ) ## See spec(...) for full column specifications. ## Warning: Column `PLN_AREA_N`/`planning_area` joining factor and character ## vector, coercing into character vector tm_shape(planning_areas) + tm_polygons(col = &#39;area_hdb&#39;) hex_grid &lt;- planning_areas %&gt;% st_make_grid(st_bbox(.), square = FALSE, cellsize = 1500) %&gt;% st_sf() %&gt;% mutate(hex_id = row_number()) tm_shape(hex_grid) + tm_polygons() hex_grid &lt;- st_join(hex_grid, planning_areas, largest = T) ## Warning: attribute variables are assumed to be spatially constant throughout all ## geometries tm_shape(hex_grid) + tm_polygons(col = &#39;area_hdb&#39;) listings_sf &lt;- readRDS(here::here(&quot;projdata/listings_sf.rds&quot;)) listings_sf_hex &lt;- st_join(listings_sf, hex_grid) %&gt;% st_set_geometry(NULL) Joining to sociodemographic data to find out if areas with HDB flats have listings that are more expensive. hex_grid &lt;- listings_sf_hex %&gt;% group_by(hex_id) %&gt;% summarise(mean_price = mean(price), mean_nights = mean(minimum_nights), mean_reviews_mth = mean(reviews_per_month)) %&gt;% left_join(hex_grid, .) %&gt;% select(-starts_with(&quot;hh&quot;), -starts_with(&quot;age&quot;), -starts_with(&quot;edu&quot;), -starts_with(&quot;eth&quot;), -starts_with(&quot;status&quot;), -starts_with(&quot;occupation&quot;), -starts_with(&quot;dwelling&quot;)) %&gt;% filter(mean_price &lt; 600) ## Joining, by = &quot;hex_id&quot; tm_shape(hex_grid) + tm_fill(breaks=c(0,50,100,150,200,250,300,350, 400, 450, 500, 550, 600), col = &quot;mean_price&quot;, palette=&quot;YlGnBu&quot;) + tm_borders() 8.2 Reflection on Spatial Autocorrelation/Regression Method Initially, my intention of using the spatial autocorrelation method is to find out if the different variables had an effect on Airbnb prices. However, I later realised that there was no significant pattern. I then tried to aggregate data from our lab practice which shows the percentage of HDBs in each planning area, with the intention of finding out if areas with higher HDB percentage have lower number of reviews (used as proxy for listings). Secondly, I wanted to find out if areas with more HDBs have listings that are less expensive, as that may indicate that the listings are HDBs. However, it was difficult to make conclusions from the data, and my guess is that the reasons are similar to that of the spatial clustering method. In addition, it could also mean that the variables are not really influencing prices. "],
["concluding-thoughts.html", "9 Concluding thoughts", " 9 Concluding thoughts To summarise, it is clear than despite the strict laws, the Airbnb platform has still gained popularity over the years. This was seen in the Section 3.2, where the number of reviews over time was used as a proxy to find out if the number of listings had increased over the years, as data for the listings was limited. If rules are so strict, why then are we seeing so many Airbnb listings in Singapore? The first observation is that some of these listings are boutique hotels. At the start of this study, the research was crafted with the assumption that all the listings belong to home owners, and this might have affected the the initial analyses pertaining to the minimum length of stay. Given more time to analyse the data, I would probably remove listings that belong to hotels in order to get a better sense of the actual ground situation regarding home owners. Having said that, the presence of hotel listings also suggests that the Airbnb platform may not necessarily be a threat to hotels, but can also provide them - especially newer boutique hotels - with more visibility amongst potential guests. The second observation is that most property listings are located in the Central region. The central region also has more variety of property and room types, which we saw in Section 3.3.7. Hotels, however, were only found within the Central region. Thirdly, based on the minimum length of stay, there are no specific planning regions or neighbourhoods that see clusters of Airbnb listings that are potentially flouting the rules. In fact, most areas tend to have a large proportion of potential rule breakers as compared to compliant listings. Lastly, my initial hypothesis was that the location of Airbnbs will significantly affect its price. While this is true for a select few listings, we can see in the comparison between listings near the MRT and away from the MRT stations, that the price difference is marginal. "],
["references.html", "10 References", " 10 References GERDEMAN, D. 2018. The Airbnb Effect: Cheaper Rooms for Travellers, Less Revenue for Hotels. Forbes. HOUSING AND DEVELOPMENT BOARD. 2020. Regulations for Renting Out Your Flat [Online]. Available: https://www.hdb.gov.sg/cs/infoweb/residential/renting-out-a-flat/-bedroom/renting-out-your-flat/regulations-for-renting-out-of-flats [Accessed 8 Mar 2020]. INSIDE AIRBNB. 2020. Get the Data [Online]. Available: http://insideairbnb.com/get-the-data.html [Accessed 6 Mar 2020]. NIEUWLAND, S. &amp; VAN MELIK, R. 2020. Regulating Airbnb: how cities deal with perceived negative externalities of short-term rentals. Current Issues in Tourism, 23, 811-825. WONG, L. 2017. The Planning (Amendment) Bill 2017 Round-Up Speech by Lawrence Wong. Singapore. "]
]
